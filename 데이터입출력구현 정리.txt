일반적인 시스템 개발 절차

	   비즈니스 요구사항
전략수립	      개념 모델링
분석	논리 데이터모델링/	분석모델링
설계	물리 데이터 모델링/설계모델링
개발	데이터베이스 구축	/애플리케이션개발
                          
                  운영시스템
데이터베이스	/       애플리케이션

1.데이터모델링 정의
기업의 정보구조를 실체를 중심으로 명확하고 체계적으로 표현하여 문서화하는 기법

2.모델링 목적
	연관조직의 정보요구에 대한 정확한 이해
	사용자 설계자 개발자 간의 효율적 의사소통
	데이터 체계구축 통한 고품질 s/w와 유지보수 비용감소
	신규 또는 개선의 개발기초를 제공
3.모델링 특성
	데이터 중심 분석을 통한 업무흐름파악이용이
	데이터 무결성을 보장
	데이터 공유를 통한 중복제거 및 일관성 있는 정보제공
모델링 절차 
개/논/물/데
1.개념데이터모델링/전사의 정보요건을 표현한 상위수준의 모델
	주요 엔터티타입 기본속성 관계 주요업무기능 등을 포함
	모든 업무영역을 포함 주제영역에 포함되는 주임 엔터티타입간의 관계를 파악 업무규칙정의
	논리데이터 모델의 기초
2.논리데이터 모델링/개념모델로부터 업무데이터 및 규칙을 구체적으로 표현한 모델
	모든업무용 엔터티타입,속성,관계,프로세스 등을 포함
	모든 업무 데이터를 정규화 하여 모델링
	모든 업무 규칙과 관계를 완전하고 정확하게 표현
	성능 혹은 기타 제약사항과는 독립적모델로서 특정 dbms로부터 독립적
3.물리데이터 모델링/설계단계에서 시스템의 설계적 및 정보요건 정확하고 완전하게 표현
	데이터 베이스 생성을 위한 물리구조로 변환
	시스템 설계 요건 반영을 위한 아래와 같은 오브젝트 추가
-설계용 엔터티타입
-설계용 속성
	설계와 성능을 고려한 조정을 수행한다.
-적용 DBMS특성 고려
-엔터티 타입의 분리 또는 통합검토
-반정규화 
        -관계의 해제
	적용 DBMS에 적합한 성능조정을 수행
-인덱스 추가 및 조정	
-테이블 스페이스 조정
-인덱스 스페이스 조정
*정규화
	중복성을 최소화하고 정보의 일관성을 보장하기위한개념
-목적 
	데이터 중복배제로 데이터 관리 편의성 제고 및 자료 저장공간의 최소화
	데이터 모형 단순화
	데이터 구조의 안정성 및 무결성 유지
	속성의 배열상태 검증
	엔터티와 속성의 누락 여부 검증 수단
	자료검색과 추출의 효율성 추구
-특징
어떠한 관계구조가 바람직한 것인지,바람직하지 못한 관계를 어떻게 분해하여야하는지에대한 판단기준 제공
정규화된 데이터 모델은 정확성,일치성,단순성,비중복성,안전성보장
-유형
제1정규화
	반복되는 속성이나 그룹 속성 제거
	새로운 실체와 1:N의 관계추가
	모든속성은 반드시 하나의 값을 가져야함
제2정규화 
	주식별자에 완전하게 종속되지 않는 속성 제거
	불완전 함수적 종속 제거
	모든 속성은 반드시 UID전부에 종속되어야 함(일부X)
제3정규화
	비식별자에 종속되는 속성제거
	주식별자에 이행종속 되는 속성제거
	UID가 아닌 모든속성간에는 서로 종속될 수 없음(속성간종속성배제)
제4정규화
	실제로 거의 고려되지 않는 정규화
	주식별자에 다가종속되는 속성을 두가지이상 두지않음
	2차정규화된 테이블은 다대다 관계를 가질수없음
	어떠한 관계구조가 바람직한지 바람직하지 못한 관계를 어떻게 하는지 구체적 판단기준제공
정규화 수준에 따른 장단점
-장점
	유연한 데이터 구축가능
	데이터의 정확성 높아짐
-단점
	물리적 접근이 복잡
	길이가 짧은 데이터 생성 과도한 조인발생
모델작성기법
	엔터티들은 정렬하여 배열
	업무흐름의 진행순서 고려 좌에서 우 상에서 하로 중심부배열
	줌심에 배열된 엔터티와 관계를 가진 엔터티를 가깝게 한다
	관계는 사선이 아닌 수직 수평선을 사용
	공간활용 복잡X
	교차선이 생기거나 관계선이 너무길지않도록 배열
	관계 엔티티끼리 그룹 핑

물리 데이터모델 설계  

반정규화 : 성능을 중점을 두어 정규화 하는 방법     

특징: 1, 데이터 모델링 규칙에 얽매이지 않고 수행
        2, 시스템이 물리적으로 구현될때 성능 향상의 목적 
사용시기 : 1.정규화에 충실하였으나 (수행속도) 문제가있을때
               2. 다량의 범위를 자주 처리해야할때
               3. 특정범위 데이터만 자주 처리할때
               4.요약 자료만 주로 요구할때
	 5.추가된 테이블 처리를 위한 오버헤드를 고려하여 결정
	 6.인덱스의 조정 부분범위처리 유도 , 클러스터링을 이용하여 해결할수 있는지를 검토후 결정

반정규화 유형  
         1.중복 테이블 추가 
         2.테이블 조합
         3.테이블 분할
         4.테이블 제거
    (*)  5.칼럼의 중복화
                 용도
                       1.자주 사용되는 칼럼이 다른 테이블에 분산되어 있어 액세스 범위를 줄이지 못하는 경우
                       2.대량 데이터에서 row별 연산 결과를 얻고자 할 때 성능향상을 위한 칼럼을 추가할때
	         3.기본키의 형태가 적절하기 않거나 너무 많은 칼럼으로 구성된 경우
	         4.정규화 규칙에 얽매이지않고 (성능향상) 을 목적으로 한 반정규화 를 통하여 중복 데이터를 허용하는 경우 
                 방법 
                       필요한 해당 테이블,칼럼 추가
            고려사항
                       1.테이블 중복,칼럼의중복 고려
                       2.데이터 일관성,무결성 유의
                       3.sql Group Function 이용하여 해결가능 검토
                       4.저장곤간의 지나친 낭비 고려

포로시져로 포문 작성

   (PL/SQL 편집기) 에서 작성  프로시져 정의
    CREATE  OR  REPLACE  PROCEDURE prd_sex(p_num NUMBER)
	IS
		v_sum NUMBER :=0;
		v_idx  NUMBER :=0;
	BEGIN
	FOR v_idx IN 1..p_num loop
	v_sum :=v_sum+v_idx;
              END LOOP;
	dbms_output.put_line(v_sum);

	END;
  (쿼리 편집기) 에서 작성  프로시져 호출
	CALL prd_sex(5);

인덱스 설계 
1. 인덱스 적용 기준
    -인덱스 칼럼의 분포도가 10~15 % 이내인경우
      분포도=(1/칼럼값의 종류)x100 
               =(칼럼값의 평균 row수/테이블 총 row수)x100
  
    -분포도가 범위 이상이더라도 부분처리 목적하는경우
    -입출력 장표 등에서 조회 및 출력조건으로 사용되는 컬럼의 경우
    -인덱스가 자동 생성되는 기본키와 unique 키의 제약 조건을 사용하는경우

2.인덱스 칼럼선정
	-분포도가 좋은 칼럼은 단독생성하여 활용도상승
	-자주 조합되어 사용되는 칼럼은 결합인덱스로 생성활용
	-결합인덱스는 구성되는 칼럼순서 선정에 유의
	-가능한 한 수정이 빈번하지 않은 컬럼 선정

뷰설계
1.뷰속성
	-replace=뷰가 이미존재하는 경우 재생성
	-force=기본 테이블의 존재 여부에 관계없이 뷰생성
	-noforce= 기본테이블 존재할때만 생성
	-with check option=서브쿼리 내의 조건을 만족하는 행만 변경
	-with read only=dml작업 불가
2.뷰설계시 고려사항
	-최종적으로 테이블을 액세스하는것이므로 사용에따라 수행속도문제가 발생
	-뷰내의 select문의 조건은 가능한
              한 최적의 액세스 경로를 사용할수 있도록 하거나 그럴수 없다면 
              뷰를 사용한 sql의 where절에서는 반드시 양호한 액세스 경로가 되도록 한다.

SQL분류

1. 데이터 정의어 DDL (data definition language)
	1)종류
	create, drop, rename, alter, truncate 등이 있다

	CREATE : 오브젝트 생성
	DROP : 오브젝트 삭제
	RENAME : 오브젝트 이름 변경
	ALTER : 오브젝트 구조 변경
	TRUNCATE : 오브젝트 자름

2. 데이터 조작어 DML (data manipulation language)
	데이터베이스에 있는 데이터를 변경하거나 검색하기 위하여 사용되는 명령어들을 말함
	이 명령어는 트랜잭션 제어어(transation control language)를 활용하여 실행 전 상태로 복귀가능한 명령이다

	1)종류
	insert, update delete 등이 있다

	INSERT : 데이터 입력
	UPDATE : 데이터 수정
	DELETE : 데이터 삭제

3. 데이터 제어어 DCL (data control language)
	사용자별로 데이터베이스에 접근할 수 있는 권한을 부여하거나 회수하는 명령어들을 말한다.
	
	1)종류
	role, grant, revoke등이 있다
	
	ROLE : 롤
	1. 문법
	 -CREATE ROLE role_name;
	1)role_name선언 후 GRANT로 권한을 role_name으로 부여
	2)oracle에서는 일반적으로 많이 사용하는 권한을 묶어 3가지 기본 role을 제공
	-CONNECT : 데이터베이스 접속 권한
	-RESOURCE : object 생성 권한
	-DBA : 모든권한
	예시> 
	1)CREATE ROLE manager;
	2)GRANT create table, create view TO manager;
	3)GRANT manager TO scott;

	GRANT : 권한 및 롤 부여
	
	REVOKE : 권한 및 롤 회수

트랜잭션 제어어 TCL (transaction control language 

1. 종류 COMMIT, ROLLBACK, SAVEPOINT등이 있다

COMMIT : 트랜잭션을 완료하여 데이터 변경사항을 최종 변경
	commit 이후 상태
	1)데이터에 대한 변경 사항이 물리적인 디스크에 반영된다.
	2)commit이전의 데이터는 복구 불가
	3)모든 사용자가 변경된 결과를 볼수있다
	3)관련된 행에 대해 잠금이 풀리며 다른 사용자들이 조작할 수있다.
ROLLBACK : 데이터의 변경사항을 이전 상태로 돌리는 명령어
	1)롤백된 DML문장은 메모리 상의 buffer에만 영향을 미치기 때문에 복구가 가능하다
	2) 관련된 행에 대한 잠금이 풀리게 된다.
SAVEPOINT 지정된 특정 지점까지 rollback할 수 있는 명령어

SELECT 항목설명

1) DISTINCT : 중복된 행을 제거하는옵션
2) * : 테이블의 모든 컬럼을 출력
3) alias : 해당 컬럼에 대해서 다른 이름을 부여 할때 사용
	alias 지정은 스페이스 다음에 alias명 또는 AS alias지정 가능
4)table_name : 질의 대상 테이블명
5) where : 조건을 만족하는 행들만 검색
6) GROUP BY : 그룹핑 하고자 하는 단위 지정
7) HAVING : 그룹핑 한 결과값에 대한 조건 검색
8) ORDER BY : 질의 결과 정렬을 위한 옵션 (ASC 오름차순(defailt), DESC내림차순)

PL/SQL 개요
 최근의 프로그래밍 언어의 특성을수용한, SQL 의 확장 기능이라 할 수 있다.
 
	사용시 장점
		1) complie가 필요 없어 script 생성 및 변경 후 바로 실행이 가능하다
		
		2)프로그램 개발의 모듈화가 가능하다.
		 -블록 내에서 논리적으로 관련된 문장들을 그룹화 할 수 있다.
		 -강력한 프로그램을 작성하기 위해 서브 블록들을 큰 블록에 포함 할 수 있다.
		 -복잡한 문제에 대한 프로그래밍이 적절히 나뉘어진 모듈들의 집합으로 구성 할 수있다
		
		3)식별자를 선언 할 수 있다.
		 -변수, 상수 등을 선언하여 해당 식별자를 SQL과 절차적인 프로그램에서 사용 할 수 있다.
		 -데이터베이스의 테이블과 record를 기반으로 하는 Dynamic한 변수 선언이 가능하다.
		 -단일형 데이터 타입과 복합형 데이터 타입을 선언 할 수 있다.

		4)절차적 언어 구조로 된 프로그램을 작성할 수 있다.
		 -IF문을 통해 조건에 따라 일련의 문장을 실행할 수 있다.
		 -LOOP문을 통해 일련의 문장을 반복실행 할 수 있다.
		 -Explicit Cursor를 이용한 Multi-low 처리가 가능하다

		5)ERROR 처리가 가능하다
		 -Exception 처리 루틴을 이용하여 Oracle Server에러를 할 수 있다.
		 -사용자 정의 에러를 선언하고 Exception 처리 루틴으로 처리가 가능하다.

		6)성능 향상을 기대할 수 있다.
		 -PL/SQL은 네트워크 부하를 줄여 프로그램의 성능을 향상시킬 수 있다.
		 -PL/SQL은 여러 SQL문장을 BLOCK으로 묶고 한번에 BLOCK전부를 서버로 전송하기 때문에 
		통신량을 줄일 수 있어 성능 향상을 기대할 수 있다

	PL/SQL 구조
		PL/SQL은 프로그램을 논리적인 블록으로 나누게 하는 구조화된 블록 언어로서, 다음과 같은 블록 구조로 구성된다.
		
		1)선언부 ( DECLARE, Optional)
		- 실행부에서 참조할 모든 변수, 상수, 커서, 익셉션을 선언한다.
		2)실행부 (BEGIN/END, Mandatory)
		-BEGIN과 END사이에 기술되는 영역이다
		-데이터베이스 데이터를 처리할 SQL문과 PL/SQL 블록을 기술한다.
		3)예외 처리부 (Exception, Optional)
		-실행부에서 에러가 발생했을때 수행될 문장을 기술
	
	PL/SQL 처리 절차
		
		가)PL/SQL로 작성된 블록을 오라클 서버로 보내면 PL/SQL 엔진이 SQL문과 non SQL문을 구분한다.
		나)non SQL문은 PL/SQL 엔진내의 procedual Statement Executor가 sql문은 sql statement executor가 처리하게 된다.
		다)non sql문은 클라이언트 환경에서, sql 문은 서버에서 실행하게 된다.
		라)따라서 PL/SQL을 사용하게 되면 서버의 작업 양을 줄이게 되므로 네트워크 부하를 감소시켜 수행성능을 증가시키는 잇점이 있다.

	PL/SQL 프로그램 가이드 
		
		가)PL/SQL, 블록 내에서는 한 문장이 종료될떄마다 ;를 써야한다
			1)end뒤에도 ;을 사용하여 블록이 끝났다는 것을 명시하여야 한다.
			2)PL/SQL을 실행은 /을 사용하고, 성공적으로 실행된다면 "...succsessfully completed" 라는 메세지가 출력되므로 이를 확인해야함
		나)PL/SQL 블록 의 작성은 편집기를 통해서나 SQL"플러스에서 바로 작성하여 실행할 수 있고 PL/SQL 실행시 발생한 에러는 show errors명령어로 확인함
		다) PL/SQL 블록을 개발할 때 명확한 코드 생성과 유지보수를 위하여 프로그래밍 가이드를 정의, 준수, 수행하는 것이 좋다.
		라)코드의 가독성을 높이기 위하여 들여쓰기를 하도록 한다.
		
	
	